# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGZudUkXi9EEnxSQ99AQuOoraVKPiqPf
"""

import numpy as np
from prettytable import PrettyTable
import matplotlib.pyplot as plt

# Assuming you have the following data (replace with your actual data)
model_names = ["GPT-2", "T5", "BERT", "DistilBERT", "XLNet"]
training_times = [10, 12, 15, 11, 13]
topsis_scores = [0.8, 0.75, 0.82, 0.78, 0.85]

# Normalize training times (assuming lower is better)
normalized_training_times = 1 / np.array(training_times)

# Convert scores to numpy array
topsis_scores = np.array(topsis_scores)

# Normalize the scores
normalized_scores = (topsis_scores - np.min(topsis_scores)) / (np.max(topsis_scores) - np.min(topsis_scores))

# Calculate TOPSIS score
topsis_score = normalized_scores * normalized_training_times
result_table = PrettyTable()
result_table.field_names = ["Model", "TOPSIS Score", "Rank"]

# Calculate ranks
ranking = np.argsort(topsis_score)[::-1]
for i, rank in enumerate(ranking):
    result_table.add_row([model_names[rank], f"{topsis_score[rank]:.4f}", i + 1])


# Display the results table
print("TOPSIS Results:")
print(result_table)

# Extract the data for plotting
models = [model_names[rank] for rank in ranking]
topsis_scores = topsis_score[ranking]

# Plot the bar graph
plt.figure(figsize=(10, 6))
plt.bar(models, topsis_scores, color='skyblue')
plt.xlabel('Model')
plt.ylabel('TOPSIS Score')
plt.title('TOPSIS Scores for Different Models')
plt.xticks(rotation=45, ha='right')
plt.show()